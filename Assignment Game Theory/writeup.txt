Aiden Hock
025999803
CECS 427 Sec 01
27 March 2024


--APPROACH
The primary goal of this assignment was to craft two distinct Python functions: 
calculate_nash_equilibrium and calculate_social_optimum. 
These functions determine the optimal traffic flow distribution in a network modeled as 
a directed graph with polynomial edge weights. The Nash equilibrium function finds the 
traffic distribution where no individual driver benefits from changing their route, while 
the social optimum function identifies the distribution that minimizes the total cost for 
all drivers.

For the Nash equilibrium, the approach involved iterating over all drivers and finding the 
best possible path for each, given the current distribution of the others. The iterative 
process continued until no driver could lower their cost by changing paths.

The social optimum required examining all possible driver distributions across the network's 
paths. It calculated the total system cost for each potential distribution, seeking the one 
with the lowest cost.

--CHALLENGES 
Nash Equilibrium: The primary challenge was the algorithm's iterative nature, requiring 
efficient convergence mechanisms to ensure the process terminates at the equilibrium without 
excessive computations.

Social Optimum: The challenge was in examining all driver distributions across paths, a 
combinatorial problem that could become computationally intensive as the number of drivers 
increased.

--ADDITIONAL FEATURES
For my own testing purposes I had my functions return their driver distributions between paths.